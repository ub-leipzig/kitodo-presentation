{"version":3,"sources":["plugins/pageview/tx_dlf_ol3_source.js"],"names":["dlfViewerSource","findKey","obj","f","opt_this","key","call","undefined","tileLoadFunction","tileSize","tile","url","img","getImage","$","load","naturalWidth","naturalHeight","canvas","document","createElement","width","height","ctx","getContext","drawImage","v","src","IIIF","options","format","quality","size","origin","crossOrigin","offset","resolutions","extend","projection","maxZoom","Math","max","ceil","log","LN2","tierSizes","i","scale","pow","width_","height_","tilesX_","tilesY_","push","extent","tileGrid","ol","tilegrid","TileGrid","reverse","getTopLeft","tileUrlFunction","tileCoord","pixelRatio","z","sizes","x","y","tileBaseSize","minx","miny","maxx","min","maxy","floor","query","tileImageParams","has","CANVAS","bind","source","TileImage","getMetdadataURL","baseUrl","pathString","lastIndexOf","length","IIP","indexOf","tierSizeInTiles","imageWidth","imageHeight","res","resolution","tileCoordX","tileCoordY","tileIndex","queryString","parseMetadata","metadataString","maxSize","split","tileSizeTmp","resolutionNumTmp","resolutionNum","parseInt","substring","metadataObj"],"mappings":"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","file":"tx_dlf_ol3_source.js","sourcesContent":["/**\n * (c) Kitodo. Key to digital objects e.V. <contact@kitodo.org>\n *\n * This file is part of the Kitodo and TYPO3 projects.\n *\n * @license GNU General Public License version 3 or later.\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n */\n\n/**\n * Namespace for dlfViewer ol3 sources\n * @namespace\n */\nvar dlfViewerSource = dlfViewerSource || {};\n\n/**\n * Utility Function based on Google Closure Library.\n * http://google.github.io/closure-library/api/source/closure/goog/object/object.js.src.html#l306\n *\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n *\n * @param {Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,Object<K,V>):boolean} f The\n *      function to call for every element. Takes 3 arguments (the value,\n *     the key and the object) and should return a boolean.\n * @param {T=} opt_this An optional \"this\" context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n */\ndlfViewerSource.findKey = function(obj, f, opt_this) {\n    for (var key in obj) {\n        if (f.call(/** @type {?} */ (opt_this), obj[key], key, obj)) {\n            return key;\n        }\n    }\n    return undefined;\n};\n\n/**\n * OpenLayers 3 TileLoadFunction based on the work of Klokan Technologies GmbH (http://www.klokantech.com) and\n * the IIIFViewer. See: https://github.com/klokantech/iiifviewer/blob/master/src/iiifsource.js\n *\n * @param {number} tileSize\n * @param {ol.ImageTile} tile\n * @param {string} url\n */\ndlfViewerSource.tileLoadFunction = function(tileSize, tile, url) {\n    var img = tile.getImage();\n    $(img).load(function() {\n        if (img.naturalWidth > 0 &&\n          (img.naturalWidth != tileSize || img.naturalHeight != tileSize)) {\n            var canvas = document.createElement('canvas');\n            canvas.width = tileSize;\n            canvas.height = tileSize;\n\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n\n            var key = dlfViewerSource.findKey(tile, function(v) {return v == img;});\n            if (key) tile[key] = canvas;\n        }\n    })\n    img.src = url;\n};\n\n/**\n * OpenLayers 3 compatible source object for an iiif server.\n *\n * Based on the work of Klokan Technologies GmbH (http://www.klokantech.com) and the IIIFViewer. See:\n * https://github.com/klokantech/iiifviewer/blob/master/src/iiifsource.js\n *\n * @param {Object} options\n * @constructor\n */\ndlfViewerSource.IIIF = function(options) {\n\n    // parse parameters\n    var url = options.url,\n        format = options.format !== undefined ? options.format : 'jpg',\n        quality = options.quality !== undefined ? options.quality : 'native',\n        width = options.size[0],\n        height = options.size[1],\n        tileSize = options.tileSize !== undefined ? options.tileSize : 256,\n        origin = options.crossOrigin !== undefined ? options.crossOrigin : '*',\n        offset = options.offset !==  undefined ? options.offset : [0, 0],\n        resolutions = $.extend([], options.resolutions),\n        projection = options.projection;\n\n    // calculate custom paramters\n    var maxZoom = Math.max(\n        Math.ceil( Math.log(width / tileSize) / Math.LN2),\n        Math.ceil( Math.log(height / tileSize) / Math.LN2)\n    );\n\n    var tierSizes = [];\n    for (var i = 0; i <= maxZoom; i++) {\n        var scale = Math.pow(2, maxZoom - i);\n        var width_ = Math.ceil(width / scale);\n        var height_ = Math.ceil(height / scale);\n        var tilesX_ = Math.ceil(width_ / tileSize);\n        var tilesY_ = Math.ceil(height_ / tileSize);\n        tierSizes.push([tilesX_, tilesY_]);\n    }\n\n    // define tilegrid with offset extent\n    var extent = [offset[0], offset[1] + -height, offset[0] + width, offset[1]];\n    var tileGrid = new ol.tilegrid.TileGrid({\n            extent: extent,\n            resolutions: resolutions.reverse(),\n            origin: ol.extent.getTopLeft(extent),\n            tileSize: tileSize\n        });\n\n    /**\n     * @this {ol.source.TileImage}\n     * @param {ol.TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {ol.proj.Projection} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    var tileUrlFunction = function(tileCoord, pixelRatio, projection) {\n\n        var z = tileCoord[0];\n        if (maxZoom < z) {\n            return undefined;\n        }\n\n        var sizes = tierSizes[z];\n        if (!sizes) {\n            return undefined;\n        }\n\n        var x = tileCoord[1];\n        var y = -tileCoord[2] - 1;\n        if (x < 0 || sizes[0] <= x || y < 0 || sizes[1] <= y) {\n            return undefined;\n        } else {\n            var scale = Math.pow(2, maxZoom - z);\n            var tileBaseSize = tileSize * scale;\n            var minx = x * tileBaseSize;\n            var miny = y * tileBaseSize;\n            var maxx = Math.min(minx + tileBaseSize, width);\n            var maxy = Math.min(miny + tileBaseSize, height);\n\n            maxx = scale * Math.floor(maxx / scale);\n            maxy = scale * Math.floor(maxy / scale);\n\n            var query = '/' + minx + ',' + miny + ',' +\n              (maxx - minx) + ',' + (maxy - miny) +\n              '/pct:' + (100 / scale) + '/0/' + quality + '.' + format;\n\n            return url + query;\n        }\n    };\n\n    var tileImageParams = {\n        crossOrigin: origin,\n        projection: projection,\n        tileGrid: tileGrid,\n        tileUrlFunction: tileUrlFunction\n    };\n\n    if (ol.has.CANVAS) {\n        tileImageParams.tileLoadFunction = dlfViewerSource.tileLoadFunction.bind(this, tileSize);\n    }\n\n    return new ol.source.TileImage(tileImageParams);\n};\n\n/**\n * Returns an iiif compatible metadata url.\n *\n * @param {string} baseUrl\n * @return {string}\n */\ndlfViewerSource.IIIF.getMetdadataURL = function(baseUrl) {\n    var pathString = baseUrl.lastIndexOf('/') + 1 === baseUrl.length\n        ? 'info.json'\n        : '/info.json';\n\n    return baseUrl + pathString;\n};\n\n/**\n * OpenLayers 3 compatible source object for an iip server.\n *\n *\n * @param {Object} options\n * @constructor\n */\ndlfViewerSource.IIP = function(options) {\n\n    // parse parameters\n    var url = options.url.indexOf('?') > -1\n          ? options.url\n          : options.url + '?',\n        width = options.size[0],\n        height = options.size[1],\n        tileSize = options.tileSize !== undefined ? options.tileSize : 256,\n        origin = options.crossOrigin !== undefined ? options.crossOrigin : '*',\n        offset = options.offset !==  undefined ? options.offset : [0, 0],\n        resolutions = [],\n        projection = options.projection;\n\n    // calculate tiersize in tiles and resolutions\n    var tierSizeInTiles = [],\n        imageWidth = width,\n        imageHeight = height,\n        res = 1;\n    while (imageWidth > tileSize || imageHeight > tileSize) {\n\n        tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSize),\n            Math.ceil(imageHeight / tileSize)\n        ]);\n        resolutions.push( res );\n\n        imageWidth >>= 1;\n        imageHeight >>= 1;\n        res += res;\n\n    };\n    resolutions.push( res );\n    tierSizeInTiles.push( [1,1]);\n    tierSizeInTiles.reverse();\n\n    var extent = [offset[0], offset[1] + -height, offset[0] + width, offset[1]];\n    var tileGrid = new ol.tilegrid.TileGrid({\n        extent: extent,\n        resolutions: resolutions.reverse(),\n        origin: ol.extent.getTopLeft(extent),\n        tileSize: tileSize\n    });\n\n    /**\n     * @this {ol.source.TileImage}\n     * @param {ol.TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {ol.proj.Projection} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    var tileUrlFunction = function(tileCoord, pixelRatio, projection) {\n        if (tileCoord === undefined ||tileCoord === null) {\n            return undefined;\n        } else {\n            var resolution = tileCoord[0],\n                tileCoordX = tileCoord[1],\n                tileCoordY = -tileCoord[2] - 1,\n                tileIndex = tileCoordY * tierSizeInTiles[resolution][0] + tileCoordX;\n            return url + '&JTL=' + resolution + ',' + tileIndex;\n        }\n    }\n\n    var tileImageParams = {\n        crossOrigin: origin,\n        projection: projection,\n        tileGrid: tileGrid,\n        tileUrlFunction: tileUrlFunction\n    };\n\n    if (ol.has.CANVAS) {\n        tileImageParams.tileLoadFunction = dlfViewerSource.tileLoadFunction.bind(this, tileSize);\n    }\n\n    return new ol.source.TileImage(tileImageParams);\n\n\n};\n\n/**\n * Returns an iip compatible metadata url.\n *\n * @param {string} baseUrl\n * @return {string}\n */\ndlfViewerSource.IIP.getMetdadataURL = function(baseUrl) {\n    var queryString = '&obj=IIP,1.0&obj=Max-size&obj=Tile-size&obj=Resolution-number',\n        url = baseUrl.indexOf('?') > -1\n          ? baseUrl\n          : baseUrl + '?';\n    return url + queryString;\n};\n\n/**\n * Function parses a given string response for a iip metadata request.\n *\n * @param {string} metadataString\n * @return {Object}\n */\ndlfViewerSource.IIP.parseMetadata = function(metadataString) {\n\n    // parse size\n    var maxSize = metadataString.split( \"Max-size\" );\n    if(!maxSize[1]) {\n        return null;\n    }\n    var size = maxSize[1].split(\" \");\n\n    // parse tile size\n    var tileSizeTmp = metadataString.split( \"Tile-size\" );\n    if(!tileSizeTmp[1]) {\n        return null;\n    }\n    var tileSize = tileSizeTmp[1].split(\" \");\n\n    // parse resolution\n    var resolutionNumTmp = metadataString.split( \"Resolution-number\"),\n        resolutionNum = parseInt( resolutionNumTmp[1].substring(1,resolutionNumTmp[1].length)),\n        res = 1,\n        resolutions = [];\n    for (var i = 0; i <resolutionNum; i++) {\n        resolutions.push(res);\n        res += res;\n    }\n\n    var metadataObj = {\n        'width': parseInt(size[0].substring(1,size[0].length)),\n        'height': parseInt(size[1]),\n        'tilesize': [parseInt(tileSize[0].substring(1,tileSize[0].length)), parseInt(tileSize[1]) ],\n        'resolutions': resolutions\n    };\n    return metadataObj;\n};"],"sourceRoot":"/home/christopher/IdeaProjects/kitodo-presentation/es6"}